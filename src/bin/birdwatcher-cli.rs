use birdwatcher_rs::rpc::common::InsightClient;
use itertools::Itertools as _;
use std::{iter::zip, net::SocketAddr, str::FromStr, time::Duration};
use tarpc::{
    client,
    context::{self},
    tokio_serde::formats::Json,
};

#[tokio::main(flavor = "current_thread")]
async fn main() -> anyhow::Result<()> {
    let mut transport = tarpc::serde_transport::tcp::connect(
        SocketAddr::from_str("[::1]:50051").unwrap(),
        Json::default,
    );
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = InsightClient::new(client::Config::default(), transport.await?).spawn();

    // tokio::time::sleep(Duration::from_secs(10)).await;
    let mut interval = tokio::time::interval(Duration::from_secs(1));

    loop {
        let res = client.get_data(context::current()).await;

        let bundle = res.unwrap();

        let services = zip(
            bundle.config.service_definitions.iter(),
            bundle.service_states.iter(),
        )
        .map(|(def, state)| format!("{}: {:?}", def.service_name, state))
        .join("\n");

        println!("res = {}", services);
        interval.tick().await;
    }
}
