use anyhow::Ok;
use birdwatcher_rs::{
    config::Config,
    rpc::{
        common::{Insight, InsightClient},
        server::InsightServer,
    },
    service::ServiceState,
};
use std::{net::SocketAddr, str::FromStr};
use tarpc::{
    client,
    context::{self},
    tokio_serde::formats::Json,
};

#[tokio::main(flavor = "current_thread")]
async fn main() -> anyhow::Result<()> {
    let mut transport = tarpc::serde_transport::tcp::connect(
        SocketAddr::from_str("[::1]:50051").unwrap(),
        Json::default,
    );
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = InsightClient::new(client::Config::default(), transport.await?).spawn();

    let res = client.hello(context::current(), format!("bla1")).await;

    println!("res = {:?}", res);

    Ok(())
}
